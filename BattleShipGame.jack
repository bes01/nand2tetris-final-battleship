class BattleShipGame{
	
	field int xStartPlayer;
	field int xEndPlayer;
	field int xStartAI;
	field int xEndAI;
	field int yStart;
	field int yEnd;
	field int dimension;

	field Cursor cursor;
	field PlayerShips playerGrid;
	field AIShips aiGrid;

	field String computerWonMessage, playerWonMessage;


	constructor BattleShipGame new(){
		// class variable init
		let xStartPlayer = 28;
		let xEndPlayer = 228;
		let xStartAI = 284;
		let xEndAI = 484;
		let yStart = 28;
		let yEnd = 228;
		let dimension = 20;
		let computerWonMessage = "Computer  Won! Press Space for Rematch :)";
		let playerWonMessage = "Player Won! Press Space for Rematch :)";

		// draw boards
		do Screen.setColor(true);
		do drawCells(xStartPlayer, xEndPlayer);
		do drawCells(xStartAI, xEndAI);
		do Output.printString("");  //რატომღაც ამის გარეშე ერორს აგდებს

		// init cursor
		let cursor = Cursor.new(xStartPlayer, yStart, dimension, xStartPlayer, xEndPlayer, yStart, yEnd);
		do Output.printString("");  //რატომღაც ამის გარეშე ერორს აგდებს

		// init boards
		let playerGrid = PlayerShips.new(xStartPlayer, yStart, dimension);
		do Output.printString("");  //რატომღაც ამის გარეშე ერორს აგდებს

		do initBoards();
		do Output.printString("");  //რატომღაც ამის გარეშე ერორს აგდებს

		return this;
	}

	method void drawCells(int xStart, int xEnd){
		var int i;
		var int j;
		var int k;
		var int x;
		var int y;

		let i = 0;

		while(i < 11){
			let k = 0;
			let x = xStart;
			let y = yStart + (i * dimension);
			while(x < (xEnd + 1)){
				do Screen.drawPixel(x, y);
				if (((k = dimension) | (x = xStart) | (x = xEnd)) & ~(i = 10)){
					let j = 1;
					while(j < 20){
						do Screen.drawPixel(x, y + j);
						let j = j + 1;
					}
					let k = 0;
				}
				let k = k + 1;
				let x = x + 1;
			}
			let i = i + 1;
		}

		return;
	}

	method void initBoards(){
		var char key;  
		var boolean exit;
		var RandomUtil random;
		var Int seed; // don't init for more randomness

		let exit = false;

		// Player board init
		while (~exit) {
			// waits for a key to be pressed
			while (key = 0) {
				let key = Keyboard.keyPressed();
				let seed = seed + 1;
			}
			
			if (key = 131) { do cursor.moveUp(); }   // up arrow
			if (key = 133) { do cursor.moveDown(); }   // down arrow
			if (key = 130) { do cursor.moveLeft(); }   // left arrow
			if (key = 132) { do cursor.moveRight(); }   // right arrow
			if (key = 128) { do playerGrid.toggleShipPart(cursor.getX(), cursor.getY()); }  // enter, p.s: სლაიდებში ეწერა 61 მაგრამ ჩემთან 128 იყო :/
			if (key = 83) { // s key
				if (playerGrid.validateBoard()){
					let exit = true;
					do cursor.dispose();
				}
				if (~exit){
					do playerGrid.resetBoard(false);
				}
			}  

			// waits for the key to be released
			while (~(key = 0)) {
				let key = Keyboard.keyPressed();
			}
		}

		// AI board init
		let aiGrid = AIShips.new(RandomUtil.new(seed), xStartAI, yStart, dimension, playerGrid);

     	return;
	}

	method void run(){
		var char key;  
		var boolean exit;
		var Int shotResult;
		let cursor = Cursor.new(xStartAI, yStart, dimension, xStartAI, xEndAI, yStart, yEnd);
		let exit = false;

		// Player board init
		while (~exit) {
			// waits for a key to be pressed
			while (key = 0) {
				let key = Keyboard.keyPressed();
			}

			if (key = 131) { do cursor.moveUp(); }   // up arrow
			if (key = 133) { do cursor.moveDown(); }   // down arrow
			if (key = 130) { do cursor.moveLeft(); }   // left arrow
			if (key = 132) { do cursor.moveRight(); }   // right arrow
			if (key = 128) { // enter, p.s: სლაიდებში ეწერა 61 მაგრამ ჩემთან 128 იყო :/
				let shotResult = aiGrid.receiveOpponentShot(cursor.getX(), cursor.getY());
				if(shotResult = 0){
					if(aiGrid.playTurn()){
						do Output.moveCursor(0, 0);
						do Output.printString(computerWonMessage);	
						let exit = true;
					}
				}
				if(shotResult = 4){
					do Output.moveCursor(0, 0);
					do Output.printString(playerWonMessage);
					let exit = true;
				}
			}  

			// waits for the key to be released
			while (~(key = 0)) {
				let key = Keyboard.keyPressed();
			}
		}

		return;
	}

	method void waitForRestart(){
		var char key;  
		var boolean exit;

		let exit = false;

		// Player board init
		while (~exit) {
			// waits for a key to be pressed
			while (key = 0) {
				let key = Keyboard.keyPressed();
			}

			if(key = 32){ // Space
				let exit = true;
			}

			// waits for the key to be released
			while (~(key = 0)) {
				let key = Keyboard.keyPressed();
			}
		}

		do Dispose();

		return;
	}

	method void Dispose(){
		do Screen.clearScreen();
		do cursor.dispose();
		do aiGrid.dispose();
		do playerGrid.dispose();
		do computerWonMessage.dispose();
		do playerWonMessage.dispose();
		do Memory.deAlloc(this);
		return;
	}

}