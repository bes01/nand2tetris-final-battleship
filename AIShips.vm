function AIShips.new 0
push constant 5
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 1
pop this 1
push argument 2
pop this 2
push argument 3
pop this 3
push this 3
call Array.new 1
pop this 4
push pointer 0
push constant 0
not
call AIShips.resetBoard 2
pop temp 0
push pointer 0
return
function AIShips.toggleShipPart 2
push argument 0
pop pointer 0
push argument 1
push this 4
add
pop pointer 1
push that 0
pop local 1
push argument 3
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 2
push local 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push this 1
push argument 1
push this 3
call Math.multiply 2
add
pop argument 1
push this 2
push argument 2
push this 3
call Math.multiply 2
add
pop argument 2
push constant 0
call Screen.setColor 1
pop temp 0
push argument 1
push constant 2
add
push argument 2
push constant 2
add
push argument 1
push this 3
add
push constant 2
sub
push argument 2
push this 3
add
push constant 2
sub
call Screen.drawRectangle 4
pop temp 0
label IF_FALSE0
push argument 3
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
label IF_FALSE1
push argument 3
push constant 2
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
label IF_FALSE2
push argument 3
push constant 3
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
label IF_FALSE3
push argument 3
push constant 4
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push argument 2
push local 1
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push this 1
push argument 1
push this 3
call Math.multiply 2
add
pop argument 1
push this 2
push argument 2
push this 3
call Math.multiply 2
add
pop argument 2
push constant 0
not
call Screen.setColor 1
pop temp 0
push argument 1
push constant 2
add
push argument 2
push constant 2
add
push argument 1
push this 3
add
push constant 2
sub
push argument 2
push this 3
add
push constant 2
sub
call Screen.drawRectangle 4
pop temp 0
label IF_FALSE4
push constant 0
return
function AIShips.placeShipSomewhere 7
push argument 0
pop pointer 0
label WHILE_EXP0
push constant 0
not
not
if-goto WHILE_END0
push this 0
push constant 10
call RandomUtil.nextInt 2
pop local 2
push this 0
push constant 10
call RandomUtil.nextInt 2
pop local 3
push pointer 0
push local 2
push local 3
call AIShips.validateCoordinate 3
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push pointer 0
push local 2
push local 3
push constant 4
call AIShips.toggleShipPart 4
pop temp 0
push constant 0
return
label IF_FALSE1
push this 0
call RandomUtil.nextBoolean 1
pop local 4
push local 4
push constant 0
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 3
pop local 1
push constant 0
pop local 5
label WHILE_EXP1
push local 3
push constant 1
neg
gt
push local 5
not
and
not
if-goto WHILE_END1
push pointer 0
push local 2
push local 3
call AIShips.validateCoordinate 3
not
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
not
pop local 5
push local 3
push constant 1
add
pop local 0
label IF_FALSE3
push local 3
push constant 1
sub
pop local 3
goto WHILE_EXP1
label WHILE_END1
push local 1
pop local 3
push constant 0
pop local 5
label WHILE_EXP2
push local 3
push this 3
push constant 1
sub
lt
push local 5
not
and
not
if-goto WHILE_END2
push pointer 0
push local 2
push local 3
call AIShips.validateCoordinate 3
not
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 0
not
pop local 5
push local 3
push constant 1
sub
pop local 1
label IF_FALSE4
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP2
label WHILE_END2
push local 1
push local 0
sub
push constant 1
add
push argument 1
gt
push local 1
push local 0
sub
push constant 1
add
push argument 1
eq
or
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
pop local 6
label WHILE_EXP3
push local 6
push argument 1
lt
not
if-goto WHILE_END3
push pointer 0
push local 2
push local 0
push local 6
add
push constant 4
call AIShips.toggleShipPart 4
pop temp 0
push local 6
push constant 1
add
pop local 6
goto WHILE_EXP3
label WHILE_END3
push constant 0
return
label IF_FALSE5
label IF_FALSE2
push local 4
push constant 1
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 2
pop local 1
push constant 0
pop local 5
label WHILE_EXP4
push local 2
push constant 1
neg
gt
push local 5
not
and
not
if-goto WHILE_END4
push pointer 0
push local 2
push local 3
call AIShips.validateCoordinate 3
not
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 0
not
pop local 5
push local 2
push constant 1
add
pop local 0
label IF_FALSE7
push local 2
push constant 1
sub
pop local 2
goto WHILE_EXP4
label WHILE_END4
push local 1
pop local 2
push constant 0
pop local 5
label WHILE_EXP5
push local 2
push this 3
push constant 1
sub
lt
push local 5
not
and
not
if-goto WHILE_END5
push pointer 0
push local 2
push local 3
call AIShips.validateCoordinate 3
not
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push constant 0
not
pop local 5
push local 2
push constant 1
sub
pop local 1
label IF_FALSE8
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP5
label WHILE_END5
push local 1
push local 0
sub
push constant 1
add
push argument 1
gt
push local 1
push local 0
sub
push constant 1
add
push argument 1
eq
or
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push constant 0
pop local 6
label WHILE_EXP6
push local 6
push argument 1
lt
not
if-goto WHILE_END6
push pointer 0
push local 0
push local 6
add
push local 3
push constant 4
call AIShips.toggleShipPart 4
pop temp 0
push local 6
push constant 1
add
pop local 6
goto WHILE_EXP6
label WHILE_END6
push constant 0
return
label IF_FALSE9
label IF_FALSE6
label IF_FALSE0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function AIShips.validateCoordinate 3
push argument 0
pop pointer 0
push constant 1
neg
pop local 0
label WHILE_EXP0
push local 0
push constant 2
lt
not
if-goto WHILE_END0
push constant 1
neg
pop local 1
label WHILE_EXP1
push local 1
push constant 2
lt
not
if-goto WHILE_END1
push pointer 0
push argument 1
push local 0
add
push argument 2
push local 1
add
call AIShips.validateBoundaries 3
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push local 0
add
push this 4
add
pop pointer 1
push that 0
pop local 2
push argument 2
push local 1
add
push local 2
add
pop pointer 1
push that 0
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
label IF_FALSE0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
not
return
function AIShips.validateBoundaries 0
push argument 0
pop pointer 0
push argument 1
push constant 1
neg
gt
push argument 1
push constant 10
lt
and
push argument 2
push constant 1
neg
gt
and
push argument 2
push constant 10
lt
and
return
function AIShips.resetBoard 3
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 10
lt
not
if-goto WHILE_END0
push constant 0
pop local 1
push argument 1
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 10
call Array.new 1
pop local 2
push local 0
push this 4
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE0
push argument 1
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push this 4
add
pop pointer 1
push that 0
pop local 2
label IF_FALSE1
label WHILE_EXP1
push local 1
push constant 10
lt
not
if-goto WHILE_END1
push local 1
push local 2
add
pop pointer 1
push that 0
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push pointer 0
push local 0
push local 1
push constant 0
call AIShips.toggleShipPart 4
pop temp 0
label IF_FALSE2
push local 1
push local 2
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
push constant 5
call AIShips.placeShipSomewhere 2
pop temp 0
push pointer 0
push constant 4
call AIShips.placeShipSomewhere 2
pop temp 0
push pointer 0
push constant 3
call AIShips.placeShipSomewhere 2
pop temp 0
push pointer 0
push constant 2
call AIShips.placeShipSomewhere 2
pop temp 0
push pointer 0
push constant 2
call AIShips.placeShipSomewhere 2
pop temp 0
push pointer 0
push constant 1
call AIShips.placeShipSomewhere 2
pop temp 0
push pointer 0
push constant 1
call AIShips.placeShipSomewhere 2
pop temp 0
push constant 0
return
